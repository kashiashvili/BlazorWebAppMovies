@page "/movies/create"
@using Microsoft.EntityFrameworkCore
@using BlazorWebAppMovies.Models
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@inject BlobServiceClient BlobServiceClient
@inject IDbContextFactory<BlazorWebAppMovies.Data.BlazorWebAppMoviesContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Movie</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Movie" OnValidSubmit="AddMovie" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="title" class="form-label">Title:</label>
                <InputText id="title" @bind-Value="Movie.Title" class="form-control" />
                <ValidationMessage For="() => Movie.Title" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="releasedate" class="form-label">Release Date:</label>
                <InputDate id="releasedate" @bind-Value="Movie.ReleaseDate" class="form-control" />
                <ValidationMessage For="() => Movie.ReleaseDate" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="genre" class="form-label">Genre:</label>
                <InputText id="genre" @bind-Value="Movie.Genre" class="form-control" />
                <ValidationMessage For="() => Movie.Genre" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="price" class="form-label">Price:</label>
                <InputNumber id="price" @bind-Value="Movie.Price" class="form-control" />
                <ValidationMessage For="() => Movie.Price" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="rating" class="form-label">Rating:</label>
                <InputText id="rating" @bind-Value="Movie.Rating" class="form-control" />
                <ValidationMessage For="() => Movie.Rating" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="image" class="form-label">Image:</label>
                <InputFile id="image" OnChange="@LoadFiles" class="form-control" />
                @if (uploadSuccessful)
                {
                    <p class="bg-success">Uploaded</p>
                }
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/movies">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Movie Movie { get; set; } = new();

    bool uploadSuccessful = false;

    private async Task AddMovie()
    {
        using var context = DbFactory.CreateDbContext();
        context.Movie.Add(Movie);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/movies");
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var containerClient = BlobServiceClient.GetBlobContainerClient("movies");

        var dotFormattedDate = Movie.ReleaseDate.ToString("dd.MM.yyyy");
        var sanitizedTitle = Movie.Title!.Replace(" ", "");
        var blobClient = containerClient.GetBlobClient($"{sanitizedTitle}-{dotFormattedDate}.jpg");

        var httpHeaders = new BlobHttpHeaders
            {
                ContentType = "image/jpeg"
            };
        await blobClient.UploadAsync(e.File.OpenReadStream(), httpHeaders);

        Movie.ImageUrl = blobClient.Uri.ToString();

        uploadSuccessful = true;
        StateHasChanged();
    }
}
